#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <algorithm>
#include <string>
#include <limits.h>
#include <time.h>
using namespace std;
/*动态规划求解最长公共子序列LCS
 *
 *IDE：CodeBlocks
 *Platform：Windows10
 *
 *Example：
 *输入"ABCD"和"EDCA"，这个LCS是"A"(或C或D)，返回1；
 *输入"ABCD"和"EACB"，这个LCS是"AC"，返回2
 *
 */
#define max(a,b) (((a)>(b))?(a):(b))
string a = "abcbdab";
string b = "bdcaba";
const int len_a = 7;
const int len_b = 6;
int mymax(int a, int b, int c)
{
	int maxNum1 = max(a, b);
	int maxNum2 = max(maxNum1, c);
	return maxNum2;
}
/*暴力递归*/
int search1(int ida, int idb)
{
	if (ida > len_a || idb > len_b) return 0;
	if (ida == len_a && idb == len_b) return 0;
	int res = INT_MIN;
	if (a[ida] == b[idb])
	{
		res = search1(ida + 1, idb + 1) + 1;
	}
	return mymax(res, search1(ida + 1, idb), search1(ida, idb + 1));
}
/*缓存表优化*/
int dp[len_a][len_b];
int search2(int ida, int idb)
{
	if (ida > len_a || idb > len_b) return 0;
	if (ida == len_a && idb == len_b) return 0;
	if (dp[ida][idb] != -1) return dp[ida][idb];
	else
	{
		int res1 = INT_MIN;
		if (a[ida] == b[idb])
		{
			res1 = search2(ida + 1, idb + 1) + 1;
		}
		int res2 = search2(ida + 1, idb);
		int res3 = search2(ida, idb + 1);
		int res = mymax(res1, res2, res3);
		dp[ida][idb] = res;
		return res;
	}
}
/*动态规划*/
int search3(int ida, int idb) {
	//初始化最末行
	for (int j = len_b - 1; j >= 0; j--)
	{
		if (b[j] != a[len_a - 1]) dp[len_a - 1][j] = 0;
		else
		{
			for (int k = 0; k <= j; k++)
			{
				dp[len_a - 1][k] = 1;
			}
			break;
		}
	}
	//初始化最右列
	for (int i = len_a - 1; i >= 0; i--)
	{
		if (a[i] != b[len_b - 1]) dp[i][len_b - 1] = 0;
		else
		{
			for (int k = 0; k <= i; k++)
			{
				dp[k][len_b - 1] = 1;
			}
			break;
		}
	}
	for (int i = len_a - 2; i >= 0; i--)
	{
		for (int j = len_b - 2; j >= 0; j--)
		{
			int res1 = INT_MIN;
			if (a[i] == b[j]) res1 = dp[i + 1][j + 1] + 1;
			int res2 = dp[i+1][j];
			int res3 = dp[i][j+1];
			int res = mymax(res1, res2, res3);
			dp[i][j] = res;
		}
	}
	return dp[0][0];
}
int main()
{
	for (int i = 0; i < len_a; i++)
	{
		for (int j = 0; j < len_b; j++)
		{
			dp[i][j] = -1;
		}
	}
    cout << "暴力递归求解=" << search1(0, 0) << endl;
    cout << "暴力优化求解=" << search2(0, 0) << endl;
	cout << "动态规划求解=" << search3(0, 0) << endl;
	return 0;
}
